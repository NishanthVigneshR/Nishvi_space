Bitwise logical operators:

	Normal logical operators such as OR, AND and NOT will compare the outputs of two or more statements (or) value of two or more variables (or) combination of statments and variables.
	In case of OR, if any one of the variable (or) statements holds value other than 0, the check will be success.
	In case of AND, only if all the statements in the check holds value other than 0, AND operator will return success.
	NOT operator is the complement, if the output is 1, it will consider it as 0. Same O means 1.

	(E.g):- a && b --> if a = 1 and b = 1 means returns 1 otherwise 0.
		a || b --> if either a (or) b is 1, returns 1. Only if both are 0 returns 0.
		!a     --> if a is 0 means returns 1, 1 means 0.

	All these comparisons are done between variables (or) statements. So, comparison will be performed in bytes.
	We can't perform  the bit level information.

Bit-wise logical Operators:

Bitwise OR operator:
	In case of bit-wise operators, we can perform the bit level comparison.
	We can perform OR , AND, NOT and XOR operations in bit level.

	In bitwise OR operators, consider two 8 bit numbers.
	In the particular digit, if any one of the bit is 1 means the result will be 1. Result will be 0 only if both are 0.

		A	|	B	| 	A | B
	---------------------------------------------------
		0	|	0	|	 0
	---------------------------------------------------
		0	|	1	|	 1
	---------------------------------------------------
                1       |       0       |        1
	---------------------------------------------------
                1       |       1       |        1


	One of the major use case of bitwise OR is,
	Now if we need to store the info about the person like below means

	    1] Is he/she eligible to vote?
	    2] Is he/she married?
	    3] Is he/she graduate?
	    4] Is he/she student?

	Mostly we will use flags for storing these flags. Four flags will be needed (4 int's).
	Since 4 ints are used, it will consume 4 * 32 - 128 bytes will be occupied.

	But, each int will be occupying 32 bits. But, we will set the flag as either 0 or 1.
	So, in that 32 bits only the least significant will be used here.

	1 means, 0000 0000 0000 0000 0000 0000 0000 0001
	0 means, 0000 0000 0000 0000 0000 0000 0000 0000

	We will toggle only the last bit. So, remaining 31 bits will idle and waste of memory consumption.
	Similiarly, for other 3 flags as well, only 1 bit will be used and other 31 bits will be idle.

	So, in these 128 bytes, only 4 bytes will be used and remaining 124 bytes will be idle.

	We can eliminate this by using bitwise OR operators.

	Consider we need to store 4 informations about the person in flag (yes/no).
	
	1] Take 8 bits. (unit8_t ==> 0000 0000).
	2] Assume, bit 1 represents eligible to vote,
		   bit 2 represents married or not,
		   bit 3 represents graduate or not,
		   bit 4 represents student or not.

	So, if the person is eligible to vote means perform bitwise OR with 1.
		(0000 0000) | (0000 0001) = 0000 0001.
	Now bit 1 is set as 1. So, the person is eligible to vote.
	Similiarly,if the person is married means perform OR with 2. Result will be 00000011. Now the person is married flag set.
	If the person is student means perform bitwise OR with 8 (1000). Result will be 0000 1011.
	Now, the student flag also will be set.

	In this way, we can eliminate unwanted memory consumption.
	For storing these flag values, we occupied 8 bits. In that we used 4 bits to store 4 flags value.
	We can store 8 flags value in 8 bits. (i.e) ., we can store n number of flags value in n number of bits.

	By using bitwise AND operator, we can retrieve the flags value in bit and even we can reset the bit flag by using bitwise AND operator.

Bitwise AND operator:

	In bitwise AND operator, only if both the bits are 1 the resultant will be 1. Or else the resultant will be 0.

                A       |       B       |       A & B
        ---------------------------------------------------
                0       |       0       |        0
        ---------------------------------------------------
                0       |       1       |        0
        ---------------------------------------------------
                1       |       0       |        0
        ---------------------------------------------------
                1       |       1       |        1


	By using bitwise OR, we can set the flags in the bit.
	By using bitwise AND operator,

1] We can retrieve the bit flag.
	For checking whether the provided person is married or not, I need to know whether 2nd bit 1.
	By performing bitwise AND with 2, I can know the result.

	(0000 1011) & (0000 0010) = 0000 0010 --> Second bit is 1 in resultant. So, the person is married.

	Check whether the person is graduate or not. Do bitwise AND with 4.
	(0000 1011) &(0000 0100) = 0000 0000 --> Third bit is 0 in resultant. So, either the person is graduate (or)
										that bit is yet to be set.

2] We can reset the bit flag as well.
	Now in our bits, we set the flags 1,2 and 4 for denoting the person is eligible to vote, married and student 
respectively.
	Assume by mistake, we have set the flag 2 (married). The person is not married and I need to reset the flag back to 0.
	Bitwise AND will help us here.
	Perform bitwise AND with 253.
	(0000 1011) & (1111 1101) = 0000 1001 --> Now in resultant I have set the second bit as 0 itself.

	So, we have resetted the married or not flag bit as 0.

Bitwise XOR operator:
	Bitwise X-OR operator is the special operator.
	If any one of the operand holds value 1 means the resultant value will be 1.
	If both the operands are either 0 or 1 then the resultant value will be 0.

	By using XOR, we can swap two variables without using temp variables.
	We can perform encryption as well.

                A       |       B       |       A & B
        ---------------------------------------------------
                0       |       0       |        0
        ---------------------------------------------------
                0       |       1       |        1
        ---------------------------------------------------
                1       |       0       |        1
        ---------------------------------------------------
                1       |       1       |        0

	swapping logic : (assume, w1 - 2 = 010, w2 - 4 = 100)

			w1 = w1 ^ w2; (010 ^ 100  = 110)
			w2 = w1 ^ w2; (110 ^ 100  = 010)   , Thus, w2 becomes 010 (2).
			w1 = w1 ^ w2; (110 ^ 010  = 100)   , Thus, w1 becomes 100 (4).

Bitwise NOT operator:
	By using bitwise NOT operator, we can get the negative equivalent of the provided number.

                A       |       ~(A)
        --------------------------------
                0       |       1    
        --------------------------------
                1       |       0      

	This conversion will be bit tricky. 1's complement and 2's complement will come into play.

	The result of ~ operator on a small number can be a big number if the result is stored in an unsigned variable. And the result may be a negative number if the result is stored in a signed variable (assuming that the negative numbers are stored in 2â€™s complement form where the leftmost bit is the sign bit) 

	Assume, signed int a = 5;  (101)
		Complement of 5 will be 6.

	consider 8 bits for now. 32th bit will be sign bit.
	~(A) = ~(0000 0101)

	1's complement: 1111 1010 and MSB will be 1. So, now need to perform 2's complement.
	
	complement the output of 1's complement = 0000 0101
	Number is				= 5
	Increment the number by 1 		= 6
	change the sign of the number		= -6.

	Thus, the ~(A) = ~(5)  is -6.

	If the variable in unsigned means we will get big positive number.
	
