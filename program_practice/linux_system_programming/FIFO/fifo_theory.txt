FIFO:
	By using pipes, we can share the data between parent and child process.
	By opening pipes, the memory will be allocated in kernel memory.
	Then, by using two end fd's we can communicate data between parent and child process.

	By using FIFO, we can share the common file between two processes.

	pipe will be created but it will allocated with name in FIFO and it's known as namedpipe. (Read below description)

	Pipes are used for communication between related processes (parent-child process).
	But, by using FIFO we can communicate between non-related processes.

	we will use normal file system calls for handling the files in FIFO. (open, write, read etc..,)

Header file:
	#include <fcntl.h>
	#include <sys/stat.h>   --> for FIFO.

We can create the file by using mkfifo() system call.

Syntax : mkfifo(const char *pathname, mode_t mode);

	where,
	pathname represents the file to be created
	mode represents the permissions to be assigned for the file.

Further, handling will be same as normal file system.

	The file which got created is  'named pipe'.

man page : man 3 fifo, man 7 mkfifo.

Description:

       The  kernel  maintains exactly one pipe object for each FIFO special file that is opened by at least one process.  The
       FIFO must be opened on both ends (reading and writing) before data can be passed.  Normally, opening the  FIFO  blocks
       until the other end is opened also.

       A process can open a FIFO in nonblocking mode.  In this case, opening for read-only succeeds even if no one has opened
       on the write side yet and opening for write-only fails with ENXIO (no such device or address) unless the other end has
       already been opened.

       Under  Linux, opening a FIFO for read and write will succeed both in blocking and nonblocking mode.  POSIX leaves this
       behavior undefined.  This can be used to open a FIFO for writing while there are no readers available.  A process that
       uses both ends of the connection in order to communicate with itself should be very careful to avoid deadlocks.
